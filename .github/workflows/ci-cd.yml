# CI/CD Pipeline for E-Dukaan Backend
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Linting and Code Quality
  lint:
    name: 🧹 Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Run Prettier check
        run: npx prettier --check .

  # Job 2: Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 3: Unit & Integration Tests
  test:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          PORT=5000
          JWT_SECRET=test-jwt-secret-key-for-ci-pipeline-minimum-32-characters
          JWT_EXPIRE=7d
          MONGODB_URI=mongodb://testuser:testpass@localhost:27017/ecommerce-test?authSource=admin

          # Email Configuration (Test)
          EMAIL_HOST=smtp.gmail.com
          EMAIL_PORT=587
          EMAIL_USER=test@example.com
          EMAIL_PASS=testpass
          EMAIL_FROM=test@example.com

          # Stripe Configuration (Test)
          STRIPE_PUBLIC_KEY=pk_test_example
          STRIPE_SECRET_KEY=sk_test_example
          STRIPE_WEBHOOK_SECRET=whsec_test_example

          # Security
          CORS_ORIGIN=http://localhost:3000,http://localhost:3001
          RATE_LIMIT_MAX=100
          EOF

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Job 4: End-to-End Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          PORT=5000
          JWT_SECRET=test-jwt-secret-key-for-ci-pipeline-minimum-32-characters
          JWT_EXPIRE=7d
          MONGODB_URI=${{ secrets.MONGODB_TEST_URI }}

          # Email Configuration (Test)
          EMAIL_HOST=smtp.gmail.com
          EMAIL_PORT=587
          EMAIL_USER=test@example.com
          EMAIL_PASS=testpass
          EMAIL_FROM=test@example.com

          # Stripe Configuration (Test)
          STRIPE_PUBLIC_KEY=pk_test_example
          STRIPE_SECRET_KEY=sk_test_example
          STRIPE_WEBHOOK_SECRET=whsec_test_example

          # Security
          CORS_ORIGIN=http://localhost:3000
          RATE_LIMIT_MAX=1000
          EOF

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 5: Build & Security Scan Image (for Production)
  build:
    name: 🏗️ Build & Scan Image
    runs-on: ubuntu-latest
    needs: [security, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: Deploy to Render, Vercel, or your staging server
        env:
          STAGING_DEPLOY_URL: ${{ secrets.STAGING_DEPLOY_URL }}
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

  # Job 7: Production Deployment (Manual Approval)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🌟 Deploying to production environment..."
          # Add your production deployment commands here
        env:
          PRODUCTION_DEPLOY_URL: ${{ secrets.PRODUCTION_DEPLOY_URL }}
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## 🎉 New Release Deployed to Production

            **Deployed on:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.event.head_commit.message }}
            **SHA:** ${{ github.sha }}

            ### Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # Job 8: Post-Deployment Health Check
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Health check production API
        run: |
          echo "🏥 Running health checks..."
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_API_URL }}/docs || exit 1
        timeout-minutes: 5

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,commit,author,took,workflow,job,pullRequest
